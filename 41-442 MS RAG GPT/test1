# gpt-rag.ps1

# 1) Minimal logging to a file
$logFile = "C:\labfiles\progress.log"
function Write-Log($msg) {
    $stamp = (Get-Date).ToString("yyyy-MM-dd HHmmss")
    Add-Content $logFile "[INFO] $stamp $msg"
}

Write-Log "Script started in GitHub version."

# 2) Pull environment variables (set by wrapper or lifecycle script)
$AdminUserName  = $env:LAB_ADMIN_USERNAME
$AdminPassword  = $env:LAB_ADMIN_PASSWORD
$tenantId       = $env:LAB_TENANT_ID
$subscriptionId = $env:LAB_SUBSCRIPTION_ID
$clientId       = $env:LAB_CLIENT_ID
$clientSecret   = $env:LAB_CLIENT_SECRET

# 3) Basic validations
if (-not $AdminUserName -or -not $AdminPassword) {
    Write-Log "Missing LAB_ADMIN_USERNAME or LAB_ADMIN_PASSWORD."
    return
}
if (-not $tenantId -or -not $subscriptionId) {
    Write-Log "Missing LAB_TENANT_ID or LAB_SUBSCRIPTION_ID."
    return
}
if (-not $clientId -or -not $clientSecret) {
    Write-Log "Missing LAB_CLIENT_ID or LAB_CLIENT_SECRET."
    return
}

Write-Host "Lab user: $AdminUserName"
Write-Log "Environment variables loaded."

# 4) Login with lab credentials
try {
    $labCred = New-Object System.Management.Automation.PSCredential(
        $AdminUserName,
        (ConvertTo-SecureString $AdminPassword -AsPlainText -Force)
    )
    Connect-AzAccount -Credential $labCred | Out-Null
    Write-Log "Connected to Az using lab credentials."
} catch {
    Write-Host "Login failed: $($_.Exception.Message)"
    Write-Log  "Lab credentials login failed."
    return
}

# 5) Scripted login for SP for azd and az
$env:AZURE_CLIENT_ID     = $clientId
$env:AZURE_CLIENT_SECRET = $clientSecret
$env:AZURE_TENANT_ID     = $tenantId
$env:AZD_NON_INTERACTIVE = "true"

Write-Log "Logging in with service principal..."
azd auth login --client-id $clientId --client-secret $clientSecret --tenant-id $tenantId
az login --service-principal --username $clientId --password $clientSecret --tenant $tenantId | Out-Null

# 6) Prepare deployment folder
$deployPath = "$HOME\gpt-rag-deploy"
Write-Log "Preparing deployment folder $deployPath"
Remove-Item -Recurse -Force $deployPath -ErrorAction SilentlyContinue | Out-Null
New-Item -ItemType Directory -Path $deployPath -Force | Out-Null
Set-Location $deployPath

# 7) Initialize azd project
Write-Log "Initializing GPT-RAG template..."
azd init -t azure/gpt-rag -b workshop -e dev-lab | Out-Null

# 7.1) Validate required SP roles
Write-Log "Checking service principal role assignments..."

$requiredRoles = @(
    "Contributor",
    "Network Contributor",
    "Private DNS Zone Contributor"
)

$spObjectId = az ad sp show --id $clientId --query id -o tsv
if (-not $spObjectId) {
    Write-Log "Could not resolve SP object ID. Exiting."
    return
}

foreach ($role in $requiredRoles) {
    $hasRole = az role assignment list `
        --assignee-object-id $spObjectId `
        --subscription $subscriptionId `
        --query "[?roleDefinitionName=='$role']" `
        -o json | ConvertFrom-Json

    if (-not $hasRole) {
        Write-Log "Missing role: $role. Assigning..."
        az role assignment create `
            --assignee-object-id $spObjectId `
            --role "$role" `
            --scope "/subscriptions/$subscriptionId" | Out-Null
        Write-Log "Assigned: $role"
    } else {
        Write-Log "SP already has role: $role"
    }
}

# 7.2) Validate DNS and outbound network access
Write-Log "Testing outbound connectivity..."

$testUrls = @(
    "https://management.azure.com",
    "https://www.azure.com",
    "https://blob.core.windows.net"
)

foreach ($url in $testUrls) {
    try {
        $res = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 10
        Write-Log "Outbound OK: $url"
    } catch {
        Write-Log "Outbound FAIL: $url"
    }
}

try {
    $dnsCheck = Resolve-DnsName -Server 168.63.129.16 "microsoft.com"
    if ($dnsCheck) {
        Write-Log "DNS test passed (168.63.129.16)"
    }
} catch {
    Write-Log "DNS test failed (168.63.129.16)"
}

# 8) Configure azd environment
Write-Log "Setting azd environment values..."
azd env set AZURE_SUBSCRIPTION_ID $subscriptionId | Out-Null
azd env set AZURE_LOCATION eastus2 | Out-Null
azd env set AZURE_NETWORK_ISOLATION true | Out-Null
az account set --subscription $subscriptionId | Out-Null

# 9) Provision resources
Write-Log "Provisioning environment..."
azd provision --environment dev-lab --verbose 2>&1 | Tee-Object -FilePath $logFile -Append

# 10) Deploy code
Write-Log "Deploying environment..."
azd deploy --environment dev-lab --verbose 2>&1 | Tee-Object -FilePath $logFile -Append

# 11) Get final URL
Write-Log "Getting web app URL..."
$resourceGroup  = az group list --query "[?contains(name, 'gpt')].name" -o tsv
$webAppName     = az resource list --resource-group $resourceGroup --resource-type "Microsoft.Web/sites" --query "[?contains(name, 'webgpt')].name" -o tsv
$webAppUrl      = az webapp show --name $webAppName --resource-group $resourceGroup --query "defaultHostName" -o tsv

if ($webAppUrl) {
    Write-Host "Your GPT solution is live at: https://$webAppUrl"
    Write-Log  "Deployment complete. URL: https://$webAppUrl"
} else {
    Write-Log "Could not resolve web app URL."
}

Write-Log "Script completed."
Write-Host "Done."
